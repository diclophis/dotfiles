# TODO

bardin.haus
  * re-deploy all demos and documents
  * remesh kangaroo nodes to ec2 instance
  * site redesign, photography centric

risingcode.com
  * full stack rebuild
  * deploy into kube

detective-agency
  * fix thread module
  * implement remote terminal
  * implement more DSL

SiG
  * fix XSS bugs

attalos
  * drop XMPP backend
  * rebuild using ActionCable interface
    * https://github.com/libuv/libuv
    * https://github.com/cotag/spider-gazelle
    * https://www.npmjs.com/package/actioncable
    * https://github.com/palkan/litecable
  * MVP product features

cmdseqd
  * benchmark scala/akka websocket vs. ruby/ActionCable
  * MVP product features

copynews
  * make nntp mesh work
  * deploy into kube / use as some sort of messaging queue as backend
  * libnntp cross compile via webassembly/emscripten
  * peer to peer browser based nntp mesh

tiddly.js
  * create react framework
  * mvp tiddlywiki
  * ruby backend
  * re-deploy

bikeshed
  * nw.js installer
  * phantom/casper/selenium bridge
  * image compare paralell

gigamock
  * functional api
  * what was gigamock???
  * forum?

presenting.js
  * reconsider project plan?
  * progressivly enhanced react isomorphic presentation framework

get-user-media-input
  * gif import!! !!!!
  * better UI

debug-tile-texturer
  * make it so you can export sprite data to qwqz,kit1zx

ekko
  * make all the animations by extracting from source art
  * make the dolphin move, this is the player ui for kitzx ECS game!
  * figure out how to program sprite movement: https://www.youtube.com/watch?v=lSbLrWRLWl4

autocenter
  * ROI extraction
  * gif creation
  * file saving

glsl-qwqz-1.0
  * port 
  * point shader
  * document how spine animations should work
  * 2d player model for run+jump+fly
  * fix shader vertex generation
  * interface with JS more
  * android ios cleanup and performance

happy-trails-5
  * gamelogic with scoring
  * support non-square images
  * redeploy

image-mine
  * make a site by scraping OS imagery

centerology-4.0 / picture-haus
  * open-source
  * travis build (take from Age-Of-Discovery)
  * error log rotation
  * make jruby/neo4r/ruby-2.0 work together...?
    * maybe switch to ruby-2 with a neo4j server on torquebox?
    * maybe just use jruby-1.9 on torquebox
    * maybe just foreman
  * drop elasticsearch backend
  * switch to lire/lucene backend
  * build serverless pipeline?
    * scala?/mix-mode?
  * reconsider UI flow to optimize for user input

Age Of Discovery
  * upgrade rails/all gems everything!!!
  * some sort of working demo!!!!
  * intro art and background fiction copy finish instruction document
  * shuffle wording on instruction to read better for new gameplay elements
  * Upgrade to rails-4, re-integrate with centerology-4.0
    * fix problems with neo4j on rails4 + jruby
  * blockchain based economy / transaction system?
  * interface some sort of 
  * re-deploy into kube

emscripten
  * push back stuff

MemoryLeak
  * fix webaudio, firefox supports webaudio
  * render sub-tiles into larger tile
  * render to texture
  * TileMap sprite location logic
    * needs seperate octree for render
  * Maze location based

lyteride-1.0
  * occulus-rift framework
  * rectangle for bike
  * drop rectangles for line behind
  * constant forward velocity
  * left or right

PixelThings
  * update xcode project
  * integration with kicksaas

risingcode-fss
  * moving text?

ctr
  * upgrade threejs
  * add game logic
  * render perf improvements

ingressfd
  * prototype functional mruby based ssl http server

logrepd
  * better runtime options
  * install fluentd/postgres into bardin.haus kube cluster
  * live deployment to bardin.haus

marvin
  * working prototype of redis/resque worker plugin
  * benchmark against other redis/resque plugins

versioning-file-cabinet
  * deploy to kube
  * README and marketing docs
  * exmaple usage of bikeshed

syncretizer
  * determine viability of project
  * more example scenarios matching real-world deploy cases
  * bridge with wkndr as shebang translator for executable 

super-happy-voxeltime-2d
  * deploy prototype to kube
  * use a simple visualization of data in a voxel space from alternative backend dbs

sidecar
  * test kube 1.8 / openvpn clusterability
  * re-mesh with m41nfrnn and ec2 instance 

shell3
  * finalize experiment research and documents
  * opensource
  * procfile auto-runner? ... combine with other projects?
  * working osx build
  * merge into wkndr

ruby-libuv-lab
  * publish benchmarks

# https://www.commonwl.org/user_guide/03-input/index.html


msgpack / grpc

kit1zx 3d html emscripten mruby game
 * maze game

wkndr ruby process conventional

# define per pipeline / per step what command / what container image ... use CMD???? Dockerfile convention....

# github repo

# webdav for quick hot-reloading of stuff as need-be

# circle ci planner to cwl

# faas step functions aws visual editor

# git repo local priv

# git push / pull

# start blank code pen

# uses kubernetes primitives
# rbac ...
# namespaces
# run vs job vs deployment vs cron vs... controller/operator/custom

# stdin/stdout all process have this

# simple orchestration messages ... what existing standard?????? ... exit code is primary
# https://www.commonwl.org/
# two way coms
# pipeline oriented features like progress indication and status messages

# compelling UI
# overview
# what tasks are available to run
# ETA estimates
# create pipeline from _public_ github repo, what branch???, ssh key???, get key from deployment??? or public github integration!?!!??!?! app market place
# ????....... mesh of public clusters??
# auto-detect from buildpack conventions

# takes github repo... builds kaniko ... conventional Dockerfile primary ... one Dockerfile per repo...... customizable????

# can power my photography pipeline... 

# it can power mavencraft

# bookmarks site ... build wkndr --reload dev pipeline ... telepresence etc

kit1zx browser to server per player ECS mesh network

display()/tick() split

multi view

kubernetes manamgenet / overviewer

# arkanoidish / tron game

# machine learning pipeline??????????

# https://github.com/rabix/composer

# skaffold
# draft
# tilt

# kubeadm-reset in wkndr

# camera-one

# kuberntes thing with per branch bits some sort of dev local thing recipe something
# kafka on kubernetes

kit1zx websocket server process (in a pod with limited network egress and all types of other restrictions)
  system-popens() chroot'd vim-static
  installs fwatch for chroot and dispatches call to mruby parse *rb

  messages from the client are sent back to the server

  onrecv in server they are dispatched via distributed ECS style queue scribble log

  there is an api to query the scribble log

  --client --server shell cmd shell3 dispatch refactor

the chroot dir 

stdin stdout pipeline bits cwl worflow circle ci planner

nc one-endpoint | nc onother-endpoint as a tunnelling mechanism, tls key share.... hmmmmm GRPC????? other bits, just tls priv/pub client/server keypair yes?

some sort of ability share geometry between nodes???? or purely infomration only? graphql only api?

edge compute proxy function as a service endpoint visualizer graph node editor compiz 

image resize middleware s3 object content database edge node cache lru expiration

lru image cache proxy

browser is presented html document containing <img src=>

cdn proxy edge layer?

client passes signature at tail end of url

url is programmed sorta like asset host, but only for images, this is ok, url is going trhough signing case

should also have rails asset host replamcent

git driven faas

vm v8 nodejs browser debug session bridge

security at edge cache

the image transform is the lightest weight thing possible

image pipeline feeds into machine learning, only feed first page / thumbnail ... similarity engine ... use in photo site ... CMS

_____ terminal over top of background 3d, toggle with keycode DUH

browser fetchings image like proxy.cash/$obfuscated thing, share cache between users????????

get to PDF, render first page super big, send through super fast on demand resizer

scan pdf for text, or extract text elsewise

stamp_envolpe notion, webhooks seen once messaging

make kit1zx target for example grpc faas fortune cookie webhook as a service controller!!!

wkndr bin loads files / Wkndrfile, beams file to interp in browser!!! event handler loop

wkndr is submodule into kit1zx

buffer x11 back to opengl backplane

https://github.com/ewellinger/AlwaysSunnyDataset

its always sunny predictor title generator game learn ai bit fields has words bits ... tree generate operator algorithm recurvsive merkle something or another chain, markov
https://github.com/josephmisiti/awesome-machine-learning

shader toy mode

send message self debug lab mode for testing faas chunks

faas chunk is like web-worker api, allow image stdin swap, msgpack in/out

cross platform no-ops for platform spec bits

WHERE is the debugger????? and the JS integration?????

ps tree stuff

ngrok mode fo sho connect to remote bit on high port service spawn connect on server makes desktop client connect to localhost at provided port only option

the snake line is a log stream visualization

whale hunting hyperdimensional data transport megalith creates, scaling bacteria size upward progression, strange attractor decoy and bouy bait mechanism


###

git/wkndr push goes to handler, handler detects build scenario based on detected buildpack, or possibly Wkndrfile parsing, jobs are dispatched based on circleci like workflow

inbound github event knative eventsource

# knative 'runner' vs. internal 'runner' ?????

.circle/config.yml
  Dockerfile # always dockerfile first????
spec/test details # 1 command: bundle exec rake test ... multi command split via CLI filename globbing

#### deployment

1 image => 1 container * scale

  test && deploy

    get to docker image (no test code)

    multistage build, use --build-arg to pass ssh key

    each stage adds new bits to the docker file

    stages are selected during Build resource deployment with --target

    two specific stages are built

      build run then test on top of run

      test is extra bundle install --with bits for including test gems

    run phase is sent to run/deploy pipelines

    test phase is sent to split scale testing bits

      test-prepare-a
      test-prepare-b
      test-prepare-c

        -- test preparation phase is completed, where are depedencys like mysql declared?????

        -- helm / kustomize deploy test depedency mesh

          should the test deps be shared????

          monolith-a  -- github.com/foo/bar.git
            mysql
            postgres
            redis
            memcache
            elasticsearch
            s3 buckets

          microlith-a -- github.com/foo/baz.git
            monolith-a

          microlith-b -- github.com/bip/boop.git

          microlith-c -- github.com/fip/fap.git

        -- site vs. instance deployments!!!!

        test-run-a
        test-run-b
        test-run-c

        -- observe status of pipeline... goto url??? cmd get status ??? stdio/stdout

        -- completed should work through sequence of promotions

          -- promote to deployment A ... automatically
          -- promote to deployment B ... based on other event ... release based on inbound msg

            -- promotions are handled via metacontroller

            -- inbound git push is a metacontroller / container source!!!!

          -- list builds waiting for promotion / by tag / branch sort by date/time filter by

faas with live-update built in

1 image => N container * scale / container

N image => N container * scale / image / node specification / security split / egress filtering

step 1) install knative stack

https://knative.dev/docs/install/knative-with-any-k8s/

configure custom domain) https://knative.dev/docs/serving/using-a-custom-domain/

deploy local registry https://knative.dev/docs/serving/deploying-with-private-registry/

(HTTP_PROXY deployment!!!!!!!!!!!)

wkndr dev inner loop support

deploy kit1zx / wkndr.computer / wkndr.dev / 99balloons / test / deploy / photography.bardin.haus / risingcode.com / wkndr.app

internal registry /// http proxy for fast iteration loops

-- inner-loop development cycle local

  cmd dev / run

    watches for changes

    when change is detected it will
      -- create new git something... branch?????
      -- add files and commit --amend updating the name
      -- git push to wkndr remote

      -- run is invoked via wkndr remote on git-push event handler

      -- run in loop, waiting for pipeline, gateway block until next change is detected, or git status shows changes...!!!!!!

      -- what is run / test

        -- run / test creates pipelinerun resource

-- what is a metacontroller !!!???

wkndr resolve / wkndr plan -- print actions

/attachments/:id

vim buffer to html for ~/usrdir index files

grpc integration requirements

  listenOnHttp(req)
    canonUrl,isDyn,ok = upstreamGrpcValidate(req)
      lfuFetchOrInsert(key(canonUrl, req.dim))

      fetchOrInsert impls
        
        fetch original document full bytes
       
       unoconv-as-a-service

         grpcServer

           onGenerateCoversheet(canonUrl)
             fetchRawBytes(canonUrl)
             feedTo

dragDropFile
  => uploadToS3
  => indicateProgress
  => then
    => pingBackAppServer
    => appServerBuildHtmlToProxyUrl

ramps and shit 3d intersection megalophobia game levels air duct moving platforms

camera is physobj

webrtc beam audio/video stream to central server

loop scrubbing tracker mod index engine

libfive based csg callback filesystem websocket push binary data web worker physics bowling game demo shoot through concave/convex shape transformation scg guile syntax to convex hull polygon 3d render mode phsyics mode to render hull studio editor on file change available callback csg to stl pallete mtl file fixed number of color lego mode ode 3d physics engine

distance fields raycast render bowling game demo

3d print support http://www.curv3d.org/

creative coding game engine write computer program to create art

examples of creative coding communities parametric 3d generative art

3d printed building with walls and gribbles for windows doors frames etc parametric random houses generic style

beam resources between other users

polly ci as a component in another pipeline, also is client side component

deployments have notion of approval of changes, and specific timings plus other detected events based in input

remap simple loop parts into pre-calculated hashmap results index on md5 of intermediate results reduce syscalls

binlog stream ruby lib benchmark realtime performance

schema app as a service, workflow approval, AI schema recomendation, auto-alarm for various failure cases
  ... mini-ruby based dsl for replacing or repairing records
  ... integration with primary application for schema version detection
